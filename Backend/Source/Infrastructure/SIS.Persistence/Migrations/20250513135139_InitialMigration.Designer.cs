// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SIS.Persistence.Databases.Context;

#nullable disable

namespace SIS.Persistence.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250513135139_InitialMigration")]
    partial class InitialMigration
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.15")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("AcademicProgramPrerequisite", b =>
                {
                    b.Property<int>("PrerequisiteId")
                        .HasColumnType("int");

                    b.Property<int>("ProgramId")
                        .HasColumnType("int");

                    b.HasKey("PrerequisiteId", "ProgramId");

                    b.HasIndex("ProgramId");

                    b.ToTable("AcademicProgramPrerequisite");
                });

            modelBuilder.Entity("CoursePrerequisite", b =>
                {
                    b.Property<int>("CourseId")
                        .HasColumnType("int");

                    b.Property<int>("PrerequisiteId")
                        .HasColumnType("int");

                    b.HasKey("CourseId", "PrerequisiteId");

                    b.HasIndex("PrerequisiteId");

                    b.ToTable("CoursePrerequisite");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "972061cc-f9d7-4a89-9b51-6840c872999e",
                            Name = "Student",
                            NormalizedName = "STUDENT"
                        },
                        new
                        {
                            Id = "55d2f49f-8e73-4fae-b6d9-d3e4796eafc6",
                            Name = "Lecturer",
                            NormalizedName = "LECTURER"
                        },
                        new
                        {
                            Id = "ae81c36c-d0c9-4ae2-8239-fb31b5873998",
                            Name = "Advisor",
                            NormalizedName = "ADVISOR"
                        },
                        new
                        {
                            Id = "83d7941b-edd4-40b3-8db2-51fa5a596bc8",
                            Name = "Administrator",
                            NormalizedName = "ADMINISTRATOR"
                        },
                        new
                        {
                            Id = "352af689-533d-4fa1-b3e5-ada36f596061",
                            Name = "Staff",
                            NormalizedName = "STAFF"
                        },
                        new
                        {
                            Id = "7b0e1460-1385-46ba-9415-ec4c9b10fea8",
                            Name = "Rector",
                            NormalizedName = "RECTOR"
                        },
                        new
                        {
                            Id = "76b01644-9ce0-431c-ba8e-4295ae142df9",
                            Name = "Dean",
                            NormalizedName = "DEAN"
                        },
                        new
                        {
                            Id = "8ff72d1d-4a83-4f4f-ab8d-b2c5a073f6de",
                            Name = "HoD",
                            NormalizedName = "HOD"
                        },
                        new
                        {
                            Id = "59b7941a-52d4-4a8a-94b4-a070cb14b0e6",
                            Name = "SuperUser",
                            NormalizedName = "SUPERUSER"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("SIS.Domain.Entities.AcademicCalendar", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AcademicYearId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AcademicYearId");

                    b.ToTable("AcademicCalendar");
                });

            modelBuilder.Entity("SIS.Domain.Entities.AcademicProgram", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CampusId")
                        .HasColumnType("int");

                    b.Property<DateOnly>("CreatedAt")
                        .HasColumnType("date");

                    b.Property<int>("DepartmentId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("EnrollmentLimit")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<int>("Level")
                        .HasColumnType("int");

                    b.Property<int>("MaxDuration")
                        .HasColumnType("int");

                    b.Property<int>("MinDuration")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PrerequisiteProgramIds")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SemesterCredits")
                        .HasColumnType("int");

                    b.Property<int>("TotalCredits")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CampusId");

                    b.HasIndex("DepartmentId");

                    b.ToTable("AcademicProgram");
                });

            modelBuilder.Entity("SIS.Domain.Entities.AcademicSemester", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AcademicCalendarId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AcademicCalendarId");

                    b.ToTable("AcademicSemester");
                });

            modelBuilder.Entity("SIS.Domain.Entities.AcademicYear", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("UniversityId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.HasIndex("UniversityId");

                    b.ToTable("AcademicYear");
                });

            modelBuilder.Entity("SIS.Domain.Entities.Assessment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CourseInstanceId")
                        .HasColumnType("int");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Notes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("StudentCourseEnrollmentId")
                        .HasColumnType("int");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.Property<int>("WeightPercentage")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CourseInstanceId");

                    b.HasIndex("StudentCourseEnrollmentId");

                    b.ToTable("Assessment");
                });

            modelBuilder.Entity("SIS.Domain.Entities.CampusBuilding", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AddressLine1")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AddressLine2")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Notes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ZipCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("CampusBuilding");
                });

            modelBuilder.Entity("SIS.Domain.Entities.Course", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateOnly>("CreatedAt")
                        .HasColumnType("date");

                    b.Property<int>("Credits")
                        .HasColumnType("int");

                    b.Property<int>("DepartmentId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<int>("Level")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PrerequisiteCourseIds")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("DepartmentId", "Code")
                        .IsUnique();

                    b.ToTable("Course");
                });

            modelBuilder.Entity("SIS.Domain.Entities.CourseInstance", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AttendancePercentage")
                        .HasColumnType("int");

                    b.Property<int>("CourseId")
                        .HasColumnType("int");

                    b.Property<int>("DeliveryMethod")
                        .HasColumnType("int");

                    b.Property<int?>("EnrollmentLimit")
                        .HasColumnType("int");

                    b.Property<int>("LecturerAssignmentId")
                        .HasColumnType("int");

                    b.Property<int>("ProgramSemesterId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CourseId");

                    b.HasIndex("LecturerAssignmentId");

                    b.HasIndex("ProgramSemesterId", "CourseId")
                        .IsUnique();

                    b.ToTable("CourseInstance");
                });

            modelBuilder.Entity("SIS.Domain.Entities.CourseSchedule", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CourseInstanceId")
                        .HasColumnType("int");

                    b.Property<int>("DayOfWeek")
                        .HasColumnType("int");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<TimeSpan>("StartTime")
                        .HasColumnType("time");

                    b.Property<int>("TotalHours")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CourseInstanceId");

                    b.ToTable("CourseSchedule");
                });

            modelBuilder.Entity("SIS.Domain.Entities.Department", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("FacultyId")
                        .HasColumnType("int");

                    b.Property<string>("HeadOfDepartmentId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("FacultyId");

                    b.HasIndex("HeadOfDepartmentId")
                        .IsUnique();

                    b.HasIndex("PhoneNumber")
                        .IsUnique();

                    b.ToTable("Department");
                });

            modelBuilder.Entity("SIS.Domain.Entities.ExamPeriod", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("AcademicProgramId")
                        .HasColumnType("int");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Name")
                        .HasColumnType("int");

                    b.Property<int>("ProgramSemesterId")
                        .HasColumnType("int");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("AcademicProgramId");

                    b.HasIndex("ProgramSemesterId");

                    b.ToTable("ExamPeriod");
                });

            modelBuilder.Entity("SIS.Domain.Entities.Faculty", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("DeanId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("UniversityId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("DeanId")
                        .IsUnique();

                    b.HasIndex("PhoneNumber")
                        .IsUnique();

                    b.HasIndex("UniversityId", "Code")
                        .IsUnique();

                    b.HasIndex("UniversityId", "Name")
                        .IsUnique();

                    b.ToTable("Faculty");
                });

            modelBuilder.Entity("SIS.Domain.Entities.Holidays", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AcademicCalendarId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AcademicCalendarId");

                    b.ToTable("Holidays");
                });

            modelBuilder.Entity("SIS.Domain.Entities.LecturerAssignment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("DepartmentId")
                        .HasColumnType("int");

                    b.Property<DateOnly?>("EndDate")
                        .HasColumnType("date");

                    b.Property<int>("Hours")
                        .HasColumnType("int");

                    b.Property<int>("LecturerProfileId")
                        .HasColumnType("int");

                    b.Property<DateOnly>("StartDate")
                        .HasColumnType("date");

                    b.HasKey("Id");

                    b.HasIndex("DepartmentId");

                    b.HasIndex("LecturerProfileId", "DepartmentId", "StartDate")
                        .IsUnique();

                    b.ToTable("LecturerAssignment");
                });

            modelBuilder.Entity("SIS.Domain.Entities.LecturerProfile", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("LecturerId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("Title")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("LecturerId")
                        .IsUnique();

                    b.ToTable("LecturerProfile");
                });

            modelBuilder.Entity("SIS.Domain.Entities.ProgramSemester", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("NumberOfCoreCourses")
                        .HasColumnType("int");

                    b.Property<int>("NumberOfElectiveCourses")
                        .HasColumnType("int");

                    b.Property<int>("ProgramId")
                        .HasColumnType("int");

                    b.Property<int>("SemesterId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("SemesterId");

                    b.HasIndex("ProgramId", "SemesterId")
                        .IsUnique();

                    b.ToTable("ProgramSemester");
                });

            modelBuilder.Entity("SIS.Domain.Entities.RegistrationPeriod", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("AcademicProgramId")
                        .HasColumnType("int");

                    b.Property<int>("AcademicSemesterId")
                        .HasColumnType("int");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AcademicProgramId");

                    b.HasIndex("AcademicSemesterId", "AcademicProgramId")
                        .IsUnique()
                        .HasFilter("[AcademicProgramId] IS NOT NULL");

                    b.ToTable("RegistrationPeriod");
                });

            modelBuilder.Entity("SIS.Domain.Entities.StudentCourseEnrollment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AssessmentIds")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("AttendancePercentage")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CompletmentDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("CourseInstanceId")
                        .HasColumnType("int");

                    b.Property<bool>("EledgibleForMakeup")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("EnrollmentDate")
                        .HasColumnType("datetime2");

                    b.Property<float?>("Grade")
                        .HasColumnType("real");

                    b.Property<int>("ProgramEnrollmentId")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CourseInstanceId");

                    b.HasIndex("ProgramEnrollmentId");

                    b.ToTable("StudentCourseEnrollment");
                });

            modelBuilder.Entity("SIS.Domain.Entities.StudentProfile", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("StudentProfile");
                });

            modelBuilder.Entity("SIS.Domain.Entities.StudentProgramEnrollment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Credits")
                        .HasColumnType("int");

                    b.Property<double>("GPA")
                        .HasColumnType("float");

                    b.Property<DateOnly?>("GraduationDate")
                        .HasColumnType("date");

                    b.Property<int>("ProgramId")
                        .HasColumnType("int");

                    b.Property<DateOnly>("ProgramRegistrationDate")
                        .HasColumnType("date");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("StudentId")
                        .HasColumnType("int");

                    b.Property<int>("StudentProfileId")
                        .HasColumnType("int");

                    b.Property<int>("Year")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("StudentId")
                        .IsUnique();

                    b.HasIndex("StudentProfileId");

                    b.HasIndex("ProgramId", "StudentProfileId")
                        .IsUnique();

                    b.ToTable("StudentProgramEnrollment");
                });

            modelBuilder.Entity("SIS.Domain.Entities.University", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Abbreviation")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RectorId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("Abbreviation")
                        .IsUnique();

                    b.HasIndex("Name")
                        .IsUnique();

                    b.HasIndex("RectorId")
                        .IsUnique();

                    b.ToTable("University");
                });

            modelBuilder.Entity("SIS.Domain.Entities.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateOnly>("DateOfBirth")
                        .HasColumnType("date");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<DateOnly>("RegisterDate")
                        .HasColumnType("date");

                    b.Property<string>("SchoolMail")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.HasIndex("SchoolMail")
                        .IsUnique();

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("AcademicProgramPrerequisite", b =>
                {
                    b.HasOne("SIS.Domain.Entities.AcademicProgram", null)
                        .WithMany()
                        .HasForeignKey("PrerequisiteId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SIS.Domain.Entities.AcademicProgram", null)
                        .WithMany()
                        .HasForeignKey("ProgramId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CoursePrerequisite", b =>
                {
                    b.HasOne("SIS.Domain.Entities.Course", null)
                        .WithMany()
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SIS.Domain.Entities.Course", null)
                        .WithMany()
                        .HasForeignKey("PrerequisiteId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("SIS.Domain.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("SIS.Domain.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SIS.Domain.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("SIS.Domain.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SIS.Domain.Entities.AcademicCalendar", b =>
                {
                    b.HasOne("SIS.Domain.Entities.AcademicYear", "AcademicYear")
                        .WithMany("Calendars")
                        .HasForeignKey("AcademicYearId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("AcademicYear");
                });

            modelBuilder.Entity("SIS.Domain.Entities.AcademicProgram", b =>
                {
                    b.HasOne("SIS.Domain.Entities.CampusBuilding", "Campus")
                        .WithMany()
                        .HasForeignKey("CampusId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SIS.Domain.Entities.Department", "Department")
                        .WithMany()
                        .HasForeignKey("DepartmentId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Campus");

                    b.Navigation("Department");
                });

            modelBuilder.Entity("SIS.Domain.Entities.AcademicSemester", b =>
                {
                    b.HasOne("SIS.Domain.Entities.AcademicCalendar", "AcademicCalendar")
                        .WithMany("Semesters")
                        .HasForeignKey("AcademicCalendarId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("AcademicCalendar");
                });

            modelBuilder.Entity("SIS.Domain.Entities.AcademicYear", b =>
                {
                    b.HasOne("SIS.Domain.Entities.University", "University")
                        .WithMany()
                        .HasForeignKey("UniversityId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("University");
                });

            modelBuilder.Entity("SIS.Domain.Entities.Assessment", b =>
                {
                    b.HasOne("SIS.Domain.Entities.CourseInstance", "CourseInstance")
                        .WithMany("Assessments")
                        .HasForeignKey("CourseInstanceId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SIS.Domain.Entities.StudentCourseEnrollment", null)
                        .WithMany("Assessments")
                        .HasForeignKey("StudentCourseEnrollmentId");

                    b.Navigation("CourseInstance");
                });

            modelBuilder.Entity("SIS.Domain.Entities.Course", b =>
                {
                    b.HasOne("SIS.Domain.Entities.Department", "Department")
                        .WithMany()
                        .HasForeignKey("DepartmentId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Department");
                });

            modelBuilder.Entity("SIS.Domain.Entities.CourseInstance", b =>
                {
                    b.HasOne("SIS.Domain.Entities.Course", "Course")
                        .WithMany("CourseInstances")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SIS.Domain.Entities.LecturerAssignment", "LecturerAssignment")
                        .WithMany("CourseInstances")
                        .HasForeignKey("LecturerAssignmentId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SIS.Domain.Entities.ProgramSemester", "ProgramSemester")
                        .WithMany("CourseInstances")
                        .HasForeignKey("ProgramSemesterId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Course");

                    b.Navigation("LecturerAssignment");

                    b.Navigation("ProgramSemester");
                });

            modelBuilder.Entity("SIS.Domain.Entities.CourseSchedule", b =>
                {
                    b.HasOne("SIS.Domain.Entities.CourseInstance", "CourseInstance")
                        .WithMany("CourseSchedules")
                        .HasForeignKey("CourseInstanceId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("CourseInstance");
                });

            modelBuilder.Entity("SIS.Domain.Entities.Department", b =>
                {
                    b.HasOne("SIS.Domain.Entities.Faculty", "Faculty")
                        .WithMany("Departments")
                        .HasForeignKey("FacultyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SIS.Domain.Entities.User", "HeadOfDepartment")
                        .WithMany()
                        .HasForeignKey("HeadOfDepartmentId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Faculty");

                    b.Navigation("HeadOfDepartment");
                });

            modelBuilder.Entity("SIS.Domain.Entities.ExamPeriod", b =>
                {
                    b.HasOne("SIS.Domain.Entities.AcademicProgram", null)
                        .WithMany("ExamPeriods")
                        .HasForeignKey("AcademicProgramId");

                    b.HasOne("SIS.Domain.Entities.ProgramSemester", "ProgramSemester")
                        .WithMany("ExamPeriods")
                        .HasForeignKey("ProgramSemesterId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("ProgramSemester");
                });

            modelBuilder.Entity("SIS.Domain.Entities.Faculty", b =>
                {
                    b.HasOne("SIS.Domain.Entities.User", "Dean")
                        .WithMany()
                        .HasForeignKey("DeanId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SIS.Domain.Entities.University", "University")
                        .WithMany("Faculties")
                        .HasForeignKey("UniversityId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Dean");

                    b.Navigation("University");
                });

            modelBuilder.Entity("SIS.Domain.Entities.Holidays", b =>
                {
                    b.HasOne("SIS.Domain.Entities.AcademicCalendar", "AcademicCalendar")
                        .WithMany("Holidays")
                        .HasForeignKey("AcademicCalendarId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("AcademicCalendar");
                });

            modelBuilder.Entity("SIS.Domain.Entities.LecturerAssignment", b =>
                {
                    b.HasOne("SIS.Domain.Entities.Department", "Department")
                        .WithMany()
                        .HasForeignKey("DepartmentId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SIS.Domain.Entities.LecturerProfile", "LecturerProfile")
                        .WithMany("LecturerAssignments")
                        .HasForeignKey("LecturerProfileId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Department");

                    b.Navigation("LecturerProfile");
                });

            modelBuilder.Entity("SIS.Domain.Entities.LecturerProfile", b =>
                {
                    b.HasOne("SIS.Domain.Entities.User", "User")
                        .WithOne()
                        .HasForeignKey("SIS.Domain.Entities.LecturerProfile", "LecturerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("SIS.Domain.Entities.ProgramSemester", b =>
                {
                    b.HasOne("SIS.Domain.Entities.AcademicProgram", "Program")
                        .WithMany()
                        .HasForeignKey("ProgramId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SIS.Domain.Entities.AcademicSemester", "Semester")
                        .WithMany()
                        .HasForeignKey("SemesterId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Program");

                    b.Navigation("Semester");
                });

            modelBuilder.Entity("SIS.Domain.Entities.RegistrationPeriod", b =>
                {
                    b.HasOne("SIS.Domain.Entities.AcademicProgram", "AcademicProgram")
                        .WithMany()
                        .HasForeignKey("AcademicProgramId");

                    b.HasOne("SIS.Domain.Entities.AcademicSemester", "AcademicSemester")
                        .WithMany("RegistrationPeriods")
                        .HasForeignKey("AcademicSemesterId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("AcademicProgram");

                    b.Navigation("AcademicSemester");
                });

            modelBuilder.Entity("SIS.Domain.Entities.StudentCourseEnrollment", b =>
                {
                    b.HasOne("SIS.Domain.Entities.CourseInstance", "CourseInstance")
                        .WithMany("StudentEnrollments")
                        .HasForeignKey("CourseInstanceId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SIS.Domain.Entities.StudentProgramEnrollment", "ProgramEnrollment")
                        .WithMany("CourseEnrollments")
                        .HasForeignKey("ProgramEnrollmentId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("CourseInstance");

                    b.Navigation("ProgramEnrollment");
                });

            modelBuilder.Entity("SIS.Domain.Entities.StudentProfile", b =>
                {
                    b.HasOne("SIS.Domain.Entities.User", "User")
                        .WithOne()
                        .HasForeignKey("SIS.Domain.Entities.StudentProfile", "UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("SIS.Domain.Entities.StudentProgramEnrollment", b =>
                {
                    b.HasOne("SIS.Domain.Entities.AcademicProgram", "Program")
                        .WithMany()
                        .HasForeignKey("ProgramId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SIS.Domain.Entities.StudentProfile", "StudentProfile")
                        .WithMany("ProgramEnrollments")
                        .HasForeignKey("StudentProfileId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Program");

                    b.Navigation("StudentProfile");
                });

            modelBuilder.Entity("SIS.Domain.Entities.University", b =>
                {
                    b.HasOne("SIS.Domain.Entities.User", "Rector")
                        .WithMany()
                        .HasForeignKey("RectorId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Rector");
                });

            modelBuilder.Entity("SIS.Domain.Entities.AcademicCalendar", b =>
                {
                    b.Navigation("Holidays");

                    b.Navigation("Semesters");
                });

            modelBuilder.Entity("SIS.Domain.Entities.AcademicProgram", b =>
                {
                    b.Navigation("ExamPeriods");
                });

            modelBuilder.Entity("SIS.Domain.Entities.AcademicSemester", b =>
                {
                    b.Navigation("RegistrationPeriods");
                });

            modelBuilder.Entity("SIS.Domain.Entities.AcademicYear", b =>
                {
                    b.Navigation("Calendars");
                });

            modelBuilder.Entity("SIS.Domain.Entities.Course", b =>
                {
                    b.Navigation("CourseInstances");
                });

            modelBuilder.Entity("SIS.Domain.Entities.CourseInstance", b =>
                {
                    b.Navigation("Assessments");

                    b.Navigation("CourseSchedules");

                    b.Navigation("StudentEnrollments");
                });

            modelBuilder.Entity("SIS.Domain.Entities.Faculty", b =>
                {
                    b.Navigation("Departments");
                });

            modelBuilder.Entity("SIS.Domain.Entities.LecturerAssignment", b =>
                {
                    b.Navigation("CourseInstances");
                });

            modelBuilder.Entity("SIS.Domain.Entities.LecturerProfile", b =>
                {
                    b.Navigation("LecturerAssignments");
                });

            modelBuilder.Entity("SIS.Domain.Entities.ProgramSemester", b =>
                {
                    b.Navigation("CourseInstances");

                    b.Navigation("ExamPeriods");
                });

            modelBuilder.Entity("SIS.Domain.Entities.StudentCourseEnrollment", b =>
                {
                    b.Navigation("Assessments");
                });

            modelBuilder.Entity("SIS.Domain.Entities.StudentProfile", b =>
                {
                    b.Navigation("ProgramEnrollments");
                });

            modelBuilder.Entity("SIS.Domain.Entities.StudentProgramEnrollment", b =>
                {
                    b.Navigation("CourseEnrollments");
                });

            modelBuilder.Entity("SIS.Domain.Entities.University", b =>
                {
                    b.Navigation("Faculties");
                });
#pragma warning restore 612, 618
        }
    }
}
